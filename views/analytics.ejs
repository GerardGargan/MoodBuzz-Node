<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN"
      crossorigin="anonymous"
    />
    <script
      src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/4.4.1/chart.umd.js"
      integrity="sha512-ZwR1/gSZM3ai6vCdI+LVF1zSq/5HznD3ZSTk7kajkaj4D292NLuduDCO1c/NT8Id+jE58KYLKT7hXnbtryGmMg=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    ></script>
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.3.0/font/bootstrap-icons.css"
    />
    <link href="/style.css" rel="stylesheet" />
    <title>Analytics</title>
  </head>
  <body>
    <!--Include user nav component-->
    <%- include('user_nav'); %>

    <!--Main section-->
    <section class="px-3 px-sm-5 bg-section">
      <div class="container pb-5">
        <!--Breadcrumb links-->
        <nav style="--bs-breadcrumb-divider: '>'" aria-label="breadcrumb">
          <ol class="breadcrumb mb-0 pt-2">
            <li class="breadcrumb-item"><a href="/user/home">User Home</a></li>
            <li class="breadcrumb-item active" aria-current="page">
              Analytics
            </li>
          </ol>
        </nav>

        <!--User info section-->
        <div class="pb-2 pt-0">
          <div class="d-flex align-items-center">
            <i class="bi bi-person-circle bigger-icon"></i>
            <div class="ps-2 pt-3">
              <div><%= firstName %> <%= lastName %></div>
              <div>
                <h6>Analytics</h6>
              </div>
            </div>
          </div>
        </div>

        <!--Cards-->
        <div class="row row-cols-1 row-cols-md-2 g-4 mb-4">
          <!--First card-->
          <div class="col">
            <div class="card bg-light d-flex h-100">
              <h5 class="card-header">Snapshots recorded by month</h5>
              <div class="card-body">
                <div
                  class="chart-container"
                  style="position: relative; height: 225px"
                >
                  <canvas id="all_snapshots"></canvas>
                </div>
              </div>
            </div>
          </div>
          <!--Second card-->
          <div class="col">
            <div class="card bg-light d-flex h-100">
              <h5 class="card-header">Snapshots by weekday</h5>
              <div class="card-body">
                <div
                  class="chart-container"
                  style="position: relative; height: 225px"
                >
                  <canvas id="weekday_snapshots"></canvas>
                </div>
              </div>
            </div>
          </div>
          <!--Third card-->
          <div class="col">
            <div class="card bg-light d-flex h-100">
              <h5 class="card-header">Average emotion levels</h5>
              <div class="card-body" id="avg_emotion_levels">
                <div
                  class="chart-container"
                  style="position: relative; height: 350px"
                >
                  <canvas id="emotion_avg"></canvas>
                </div>
              </div>
            </div>
          </div>
          <!--Fourth card-->
          <div class="col">
            <div class="card bg-light d-flex h-100">
              <h5 class="card-header">Most common triggers</h5>
              <div class="card-body" id="triggers">
                <div
                  class="chart-container"
                  style="position: relative; height: 350px"
                >
                  <canvas id="common_triggers"></canvas>
                </div>
              </div>
            </div>
          </div>
        </div>
        <!--New row-->
        <div class="row row-cols-1 mb-5">
          <!--First card-->
          <div class="col">
            <div class="card bg-light d-flex h-100">
              <h5 class="card-header">Emotions over time</h5>
              <div class="card-body" id="emotion_values">
                <form action="/user/analytics" method="GET">
                  <div class="d-flex gap-2 pb-3">
                    <div>
                      <select class="form-select" aria-label="Select Emotion" name="emotion" id="emotion_dropdown">
                        <% Object.values(emotions).forEach(emotion => { %>
                          <% const emotion_id = emotion.emotion_id; %>
                          <% const emotion_name = emotion.emotion; %>
                          <option value="<%= emotion_id %>" <%= emotionSelected == emotion_id ? 'selected' : '' %>><%= emotion_name %></option>
                        <% }); %>
                      </select>
                    </div>
                    <div>
                      <input
                        type="submit"
                        class="btn btn-primary"
                        value="Update"
                      />
                    </div>
                  </div>
                </form>

                <div
                  class="chart-container"
                  style="position: relative; height: 350px"
                >
                  <canvas id="emotion_chart"></canvas>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>

    <%- include('footer'); %>

    <!--Script needs to stay in the file to recieve EJS templated data-->
    <script>
      //store the data passed in from the render function

      //process monthly data first
      const dates = `<%- JSON.stringify(dates); %>`;
      const counts = `<%- JSON.stringify(monthlyCounts); %>`;
      let maxYValue = `<%- JSON.stringify(maxYAxisValueMonthly); %>`;

      //increment the maxYValue by 1 to make the chart more asthetic
      maxYValue = parseInt(++maxYValue);

      //parse the counts data
      var yvalsMonthly = JSON.parse(counts);

      //parse the dates data
      const xlabelsMonthly = JSON.parse(dates);

      //set up chart data
      const chartDataMonthly = {
        labels: xlabelsMonthly,
        datasets: [
          {
            data: yvalsMonthly,
            lineTension: 0,
            pointRadius: 3,
          },
        ],
      };

      //chart configuration setup
      const chartConfig = {
        type: "line",
        data: chartDataMonthly,
        options: {
          responsive: true,
          animation: true,
          maintainAspectRatio: false,
          scales: {
            y: {
              min: 0,
              max: maxYValue,
              ticks: {
                stepSize: 1,
              },
            },
          },
          plugins: {
            legend: { display: false },
            tooltip: { enabled: true },
            title: {
              display: false,
              text: "Snapshots recorded by month",
              font: { size: 15 },
            },
          },
        },
      };

      //call the chart constructor with the id of the canvas target element
      const chartMonthly = new Chart("all_snapshots", chartConfig);

      //now set up second chart - showing snapshots by weekday
      const days = `<%- JSON.stringify(weekdays); %>`;
      const dayCounts = `<%- JSON.stringify(weekdaycounts); %>`;
      let maxWeekdayCount = `<%- JSON.stringify(maxWeekdayValue); %>`;

      //parse back to javascript objects
      const xlabelsWeekdays = JSON.parse(days);
      const yValsWeekdays = JSON.parse(dayCounts);
      let maxYAxisWeekday = parseInt(++maxWeekdayCount);

      //set up chart data
      const chartDataWeekdays = {
        labels: xlabelsWeekdays,
        datasets: [
          {
            data: yValsWeekdays,
            lineTension: 0,
            pointRadius: 3,
          },
        ],
      };

      //chart configuration setup
      const chartConfigWeekdays = {
        type: "bar",
        data: chartDataWeekdays,
        options: {
          responsive: true,
          animation: true,
          maintainAspectRatio: false,
          scales: {
            y: {
              min: 0,
              max: maxYAxisWeekday,
              ticks: {
                stepSize: 1,
              },
            },
          },
          plugins: {
            legend: { display: false },
            tooltip: { enabled: true },
            title: {
              display: false,
              text: "Snapshots by weekday",
              font: { size: 15 },
            },
          },
        },
      };

      const chartWeekday = new Chart("weekday_snapshots", chartConfigWeekdays);

      //Set up chart for average emotion values

      const emotions = `<%- JSON.stringify(emotionLabels); %>`;
      const emotionAvg = `<%- JSON.stringify(emotionAverages); %>`;
      const maxEmotion = `<%- JSON.stringify(maxEmotionValue); %>`;

      //parse back to javascript objects

      const emotionLabels = JSON.parse(emotions);
      const emotionAverageValues = JSON.parse(emotionAvg);
      let maxEmotionValue = JSON.parse(maxEmotion);

      let maxEmotionInt = parseInt(++maxEmotionValue);

      if (emotionLabels.length > 0) {
        const EmotionAvgdata = {
          labels: emotionLabels,
          datasets: [
            {
              label: "Average Emotion Ratings",
              data: emotionAverageValues,
              fill: true,
              backgroundColor: "rgba(54, 162, 235, 0.2)", // Blue
              borderColor: "rgb(54, 162, 235)", // Blue
              pointBackgroundColor: "rgb(54, 162, 235)", // Blue
              pointBorderColor: "#fff",
              pointHoverBackgroundColor: "#fff",
              pointHoverBorderColor: "rgb(54, 162, 235)", // Blue
            },
          ],
        };

        const emoAvgConfig = {
          type: "radar",
          data: EmotionAvgdata,
          options: {
            responsive: true,
            animation: true,
            maintainAspectRatio: false,
            scales: {
              r: {
                min: 1,
                max: 10,
                ticks: {
                  stepSize: 2,
                },
                grid: {
                  lineWidth: 2,
                },
                pointLabels: {
                  font: { size: 13 },
                },
              },
            },
            plugins: {
              legend: { display: false },
              tooltip: { enabled: true },
              title: {
                display: false,
                text: "Average emotion ratings",
                font: { size: 15 },
              },
            },
            elements: {
              line: {
                borderWidth: 3,
              },
            },
          },
        };
        //create the chart
        const emoAvgChart = new Chart("emotion_avg", emoAvgConfig);
      } else {
        //show appropriate message to user in the div
        const emotion_div = document.getElementById("avg_emotion_levels");
        //remove the canvas element (takes up height on the page)
        const emotion_canvas = document.getElementById("emotion_avg");
        emotion_canvas.remove();

        //display message
        emotion_div.innerText = `Record a snapshot to see this chart`;
      }

      //set up chart for most common triggers

      //parse and store the data from the server
      const triggersData = `<%- JSON.stringify(triggers); %>`;
      const triggersValsData = `<%- JSON.stringify(triggerVals); %>`;
      const maxTriggerCountData = `<%- JSON.stringify(maxTriggerCount); %>`;

      //parse back into javascript objects
      const triggers = JSON.parse(triggersData);
      const triggerVals = JSON.parse(triggersValsData);
      let maxTriggerCount = JSON.parse(maxTriggerCountData);
      //increment max y axis by one to leave some room at the top of the chart
      let maxCountInt = parseInt(++maxTriggerCount);

      if (triggers.length > 0) {
        //set up chart data
        const chartDataTriggers = {
          labels: triggers,
          datasets: [
            {
              data: triggerVals,
              lineTension: 0,
              pointRadius: 3,
            },
          ],
        };

        //chart configuration setup
        const chartConfigTriggers = {
          type: "bar",
          data: chartDataTriggers,
          options: {
            responsive: true,
            animation: true,
            maintainAspectRatio: false,
            scales: {
              y: {
                min: 0,
                max: maxTriggerCount,
                ticks: {
                  stepSize: 1,
                },
              },
            },
            plugins: {
              legend: { display: false },
              tooltip: { enabled: true },
              title: {
                display: false,
                text: "Most common triggers",
                font: { size: 15 },
              },
            },
          },
        };

        const chartTrigger = new Chart("common_triggers", chartConfigTriggers);
      } else {
        //get the divs for the trigger card and canvas
        const trigger_div = document.getElementById("triggers");
        const trigger_canvas = document.getElementById("common_triggers");
        //remove the canvas element (takes up height on the page)
        trigger_canvas.remove();
        //display a message to the user
        trigger_div.innerHTML = `Record a snapshot to see this chart`;
      }

      //new chart for selected emotions (dropdown)
      //store the data passed in from the render function

      //process monthly data first
      const emoDates = `<%- JSON.stringify(emoDateTimes); %>`;
      const emoRatings = `<%- JSON.stringify(emoRatings); %>`;

      //parse the counts data
      var yValsEmoRatings = JSON.parse(emoRatings);

      //parse the dates data
      const xLabelEmoDates = JSON.parse(emoDates);

      if (xLabelEmoDates.length > 0) {
        //set up chart data
        const chartDataEmotion = {
          labels: xLabelEmoDates,
          datasets: [
            {
              data: yValsEmoRatings,
              lineTension: 0,
              pointRadius: 3,
            },
          ],
        };

        //chart configuration setup
        const chartConfigEmotion = {
          type: "line",
          data: chartDataEmotion,
          options: {
            responsive: true,
            animation: true,
            maintainAspectRatio: false,
            scales: {
              y: {
                min: 0,
                max: 10,
                ticks: {
                  stepSize: 2,
                },
              },
            },
            plugins: {
              legend: { display: false },
              tooltip: { enabled: true },
              title: {
                display: true,
                text: '<%= emotionName %>',
                font: { size: 15 },
              },
            },
          },
        };

        //call the chart constructor with the id of the canvas target element
        const chartEmotion = new Chart("emotion_chart", chartConfigEmotion);
      } else {
        //get the elements
        const emotion_values_div = document.getElementById("emotion_values");
        const emotion_values_canvas = document.getElementById("emotion_chart");

        //remove canvas (Takes up height on the page)
        emotion_values_canvas.remove();
        //display message to user
        emotion_values_div.innerText = `Record a snapshot to see this chart`;
      }
    </script>

    <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"
      integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL"
      crossorigin="anonymous"
    ></script>
  </body>
</html>
